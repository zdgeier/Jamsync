syntax = "proto3";
package pb;

option go_package = "github.com/zdgeier/jamhub/proto/pb";
import "google/protobuf/timestamp.proto";

service JamHub {
    // Project operations
    rpc AddProject(AddProjectRequest) returns (AddProjectResponse);
    rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse);
    rpc ListUserProjects(ListUserProjectsRequest) returns (ListUserProjectsResponse);
    rpc GetProjectId(GetProjectIdRequest) returns (GetProjectIdResponse);
    rpc GetProjectCurrentCommit(GetProjectCurrentCommitRequest) returns (GetProjectCurrentCommitResponse);
    rpc GetProjectName(GetProjectNameRequest) returns (GetProjectNameResponse);
    // rpc GetProjectConfig(GetProjectConfigRequest) returns (ProjectConfig);

    // Change operations
    rpc CreateWorkspace(CreateWorkspaceRequest) returns (CreateWorkspaceResponse);
    rpc DeleteWorkspace(DeleteWorkspaceRequest) returns (DeleteWorkspaceResponse);
    rpc ListWorkspaces(ListWorkspacesRequest) returns (ListWorkspacesResponse);
    rpc GetWorkspaceCurrentChange(GetWorkspaceCurrentChangeRequest) returns (GetWorkspaceCurrentChangeResponse);
    rpc GetWorkspaceId(GetWorkspaceIdRequest) returns (GetWorkspaceIdResponse);
    rpc GetWorkspaceName(GetWorkspaceNameRequest) returns (GetWorkspaceNameResponse);

    // File operations
    rpc ReadCommitChunkHashes(ReadCommitChunkHashesRequest) returns (ReadCommitChunkHashesResponse);
    rpc ReadCommittedFile(ReadCommittedFileRequest) returns (stream CommittedFileOperation);
    rpc ListCommitOperationLocations(ListCommitOperationLocationsRequest) returns (CommitOperationLocations);
    rpc MergeWorkspace(MergeWorkspaceRequest) returns (MergeWorkspaceResponse);

    rpc ReadWorkspaceChunkHashes(ReadWorkspaceChunkHashesRequest) returns (ReadWorkspaceChunkHashesResponse);
    rpc ReadWorkspaceFile(ReadWorkspaceFileRequest) returns (stream WorkspaceFileOperation);
    rpc ListWorkspaceOperationLocations(ListWorkspaceOperationLocationsRequest) returns (WorkspaceOperationLocations);
    rpc WriteWorkspaceOperationsStream(stream WorkspaceFileOperation) returns (WriteOperationStreamResponse);

    // User operations
    rpc UserInfo(UserInfoRequest) returns (UserInfoResponse);
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
    rpc Ping(PingRequest) returns (PingResponse);
}

message GetWorkspaceNameRequest {
    uint64 project_id = 1;
    uint64 workspace_id = 2;
}

message GetWorkspaceNameResponse {
    string workspace_name = 1;
}

message GetWorkspaceIdRequest {
    uint64 project_id = 1;
    string workspace_name = 2;
}

message GetWorkspaceIdResponse {
    uint64 workspace_id = 1;
}

message GetWorkspaceCurrentChangeRequest {
    uint64 project_id = 1;
    uint64 workspace_id = 2;
}

message GetWorkspaceCurrentChangeResponse {
    uint64 change_id = 1;
}

message GetProjectCurrentCommitRequest {
    uint64 project_id = 1;
}

message GetProjectCurrentCommitResponse {
    uint64 commit_id = 1;
}


message GetProjectNameRequest {
    uint64 project_id = 1;
}

message GetProjectNameResponse {
    string project_name = 1;
}

message GetProjectIdRequest {
    string project_name = 1;
}

message GetProjectIdResponse {
    uint64 project_id = 1;
}

message EditorStreamMessage{
    uint64 project_id = 1;
    bytes update_data = 3;
}

message WriteOperationStreamResponse {
}

message FileMetadataDiff {
    enum Type {
        NoOp = 0;
        Create = 1;
        Update = 2;
        Delete = 3; 
    }
    message FileDiff {
        Type type = 1;
        File file = 2;
    }
    map<string, FileDiff> diffs = 1;
}

message WorkspaceOperationLocations {
    uint64 project_id = 1;
    string owner_id = 2;
    bytes path_hash = 3;
    uint64 workspace_id = 4;
    uint64 change_id = 5;
    message OperationLocation {
        uint64 offset = 1;
        uint64 length = 2;
        ChunkHash chunk_hash = 3;
        uint64 commit_offset = 4;
        uint64 commit_length = 5;
    }
    repeated OperationLocation opLocs = 6;
}

message CommitOperationLocations {
    uint64 project_id = 1;
    string owner_id = 2;
    bytes path_hash = 3;
    uint64 commit_id = 4;
    message OperationLocation {
        uint64 offset = 1;
        uint64 length = 2;
        ChunkHash chunk_hash = 3;
    }
    repeated OperationLocation opLocs = 5;
}

message MergeWorkspaceRequest {
    uint64 project_id = 1;
    uint64 workspace_id = 2;
}
message MergeWorkspaceResponse {
    uint64 commit_id = 1;
}

message CreateWorkspaceRequest {
    uint64 project_id = 1;
    string workspaceName = 2;
}
message CreateWorkspaceResponse {
    uint64 workspace_id = 1;
}

message ListWorkspacesRequest {
    uint64 project_id = 1;
    string project_name = 2;
}
message ListWorkspacesResponse {
    map<string, uint64> workspaces = 1;
}

message WorkspaceFileOperation {
    uint64 project_id = 1;
    uint64 workspace_id = 2;
    uint64 change_id = 3;
    bytes path_hash = 4;
    Operation op = 5;
}

message CommittedFileOperation {
    uint64 project_id = 1;
    bytes path_hash = 2;
    Operation op = 3;
}

message Operation {
    uint64 project_id = 1;
    bytes path_hash = 3;
    enum Type {
        OpBlock = 0;
        OpData = 1;
    }
    Type type = 4;
    Chunk chunk = 5;
    ChunkHash chunk_hash = 6;
}

message File {
    google.protobuf.Timestamp mod_time = 1; 
    bool dir = 2;
    bytes hash = 3;
}

message FileMetadata {
    map<string, File> files = 1;
}

message AddCollaboratorRequest {
    uint64 project_id = 1;
    string username = 2;
}
message AddCollaboratorResponse {}

message AddProjectRequest {
    string project_name = 1;
}
message AddProjectResponse {
    uint64 project_id = 1;
}

message DeleteWorkspaceRequest {
    uint64 project_id = 2;
    uint64 workspace_id = 3;
}
message DeleteWorkspaceResponse {}

message GetWorkspaceRequest {
    uint64 project_id = 1;
    string workspace_name = 2;
}
message GetWorkspaceResponse {
    uint64 workspace_id = 1;
    uint64 change_id = 2;
}

message DeleteProjectRequest {
    string project_name = 1;
    uint64 project_id = 2;
}
message DeleteProjectResponse {
    string project_name = 1;
    uint64 project_id = 2;
}

message ListUserProjectsRequest {}
message ListUserProjectsResponse {
    message Project {
        string name = 1;
        uint64 id = 2;
    }
    repeated Project projects = 1;
}

message UserInfoRequest {
    string username = 1;
}

message UserInfoResponse {
    string username = 1;
}

message CreateUserRequest {
    string username = 1;
}
message CreateUserResponse {}

message BrowseProjectRequest {
    string project_name = 1;
    string path = 2;
}

message BrowseProjectResponse {
    repeated string directories = 1;
    repeated string files = 2;
}

// message GetProjectConfigRequest {
//     string project_name = 1;
//     uint64 project_id = 2;
//     string workspace_name = 3;
// }
// 
// message ProjectConfig {
//     uint64 projectId = 1;
//     uint64 workspaceId = 2;
//     string project_name = 4;
// }

message PingRequest {}
message PingResponse {
    string username = 1;
}

message ChunkHash {
    uint64 offset = 1;
    uint64 length = 2;
    uint64 hash = 3;
}

message Chunk {
    uint64 offset = 1;
    uint64 length = 2;
    bytes data = 3;
    uint64 fingerprint = 4;
    uint64 hash = 5;
}

message ReadCommittedFileRequest {
    uint64 project_id = 1;
    uint64 commit_id = 2;
    bytes path_hash = 3;
    google.protobuf.Timestamp mod_time = 4; 
    repeated ChunkHash chunk_hashes = 5;
}

message ReadWorkspaceFileRequest {
    uint64 project_id = 1;
    uint64 workspace_id = 2;
    uint64 change_id = 3;
    bytes path_hash = 4;
    google.protobuf.Timestamp mod_time = 5; 
    repeated ChunkHash chunk_hashes = 6;
}

message ReadWorkspaceChunkHashesRequest {
    uint64 project_id = 1;
    uint64 workspace_id = 2;
    uint64 change_id = 3;
    bytes path_hash = 4;
    google.protobuf.Timestamp mod_time = 5; 
}

message ReadWorkspaceChunkHashesResponse {
    repeated ChunkHash chunk_hashes = 1;
}

message ReadCommitChunkHashesRequest {
    uint64 project_id = 1;
    uint64 commit_id = 2;
    bytes path_hash = 3;
    google.protobuf.Timestamp mod_time = 4; 
}

message ReadCommitChunkHashesResponse {
    repeated ChunkHash chunk_hashes = 1;
}

message ListWorkspaceOperationLocationsRequest {
    uint64 project_id = 1;
    string path = 2;
    uint64 workspace_id = 3;
}

message ListCommitOperationLocationsRequest {
    uint64 project_id = 1;
    string path = 2;
    uint64 commit_id = 3;
}